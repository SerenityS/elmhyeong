const {readFileSync, writeFileSync} = require('fs')
const {join} = require('path')
const lines = readFileSync(join(__dirname, 'hyeong-testcases', 'syntax.txt'))
	.toString('utf8')
	.split(/\r?\n/)
	.filter(v => !(v.trim() === '' || v[0] === '#' && v[1] !== '#'))

const template = (problem, answer) => `t "${problem} should be ${answer}" "${problem}" "${answer}"`

const o = {}
let key = ''
let str = ''
let line
while((line = lines.shift()) != null) {
	if(line.slice(0,2) === '##') {
		key = line.slice(2).trim()
		o[key] = []
		continue
	}
	const answer = lines.shift().trim()
	o[key].push(template(line, answer))
}
const baseIndent = '\n' + ' '.repeat(4)
const doubleIndent = '\n' + ' '.repeat(8)

const a = baseIndent + '[ ' + Object.keys(o).map(v => {
	return `describe "${v}"${doubleIndent}[ ${o[v].join(doubleIndent + ', ') + doubleIndent}]`
}).join(baseIndent + ', ') + baseIndent + ']'

const code = `-- Generated by /test-macro.js
module Tests exposing (all)

import Test exposing (describe, test, Test)
import Expect
import Parser exposing (parse)
import Lexer exposing (showCommand)
import List

t label problem answer = test label <| \\() ->
    Expect.equal [answer] (List.map showCommand (parse problem))

all : Test
all = describe "syntax"` + a

writeFileSync(join(__dirname, "tests", "Tests.elm"), code)
