module Parser exposing (..)

import Combine exposing (Parser, (<$>), fail, succeed, (>>=), (*>), (<*>), (<|>), runParser, while, manyTill, end)
import Combine.Char exposing (oneOf, char, satisfy)
import String exposing (filter, length, foldl, toList, cons)

type Inst = Push | Add | Mul | Neg | Inv | Swi
type Heart = FilledHeart Char | EmptyHeart | NoHeart | Question | Exclamation
type Token = Inst (Inst, Int) | Dot Int | Heart Heart | Dots (List Int)

while1 f = String.cons <$> satisfy f <*> while f

isHangul x = '가' <= x && x <= '힣'
filterHangulLen = String.length << String.filter isHangul

instSingle = oneOf ['형','항','핫','흣','흡','흑'] >>= \x -> case x of
    '형' -> succeed (Push, 1)
    '항' -> succeed (Add, 1)
    '핫' -> succeed (Mul, 1)
    '흣' -> succeed (Neg, 1)
    '흡' -> succeed (Inv, 1)
    '흑' -> succeed (Swi, 1)
    _ -> fail ""

instMany = oneOf ['혀', '하', '흐'] >>= \z -> case z of
    '혀' -> while ((/=) '엉')
        >>= \x -> (char '엉' *> succeed (Push, filterHangulLen x + 2))
    '하' ->
        let f n = oneOf ['앙', '앗'] >>= \c -> case c of
            '앙' -> succeed (Add, n)
            '앗' -> succeed (Mul, n)
            _ -> fail ""
        in while (\c -> not (c == '앙' || c == '앗'))
            >>= \x -> f (filterHangulLen x + 2)
    '흐' ->
        let f n = oneOf ['읏', '읍', '윽'] >>= \c -> case c of
            '읏' -> succeed (Neg, n)
            '읍' -> succeed (Inv, n)
            '윽' -> succeed (Swi, n)
            _ -> fail ""
        in while (\c -> not (c == '읏' || c == '읍' || c == '윽'))
            >>= \x -> f (filterHangulLen x + 2)
    _ -> fail ""

inst = instSingle <|> instMany

dotLength = foldl (\c n -> (if c == '.' then 1 else 3) + n) 0

dot = while1 (\c -> c == '.' || c == '…' || c == '⋯' || c == '⋮') >>= (succeed << dotLength)

filledHeart = oneOf (toList "♥❤💕💖💗💘💙💚💛💜💝") >>= (succeed << FilledHeart)

emptyHeart = char '♡' *> succeed EmptyHeart

question = char '?' *> succeed Question
exclamation = char '!' *> succeed Exclamation

heart = filledHeart <|> emptyHeart <|> question <|> exclamation

dots = manyTill dot ((heart *> succeed ()))

parse = manyTill ((Dot <$> dot) <|> (Heart <$> heart)) end

run = runParser parse ()
